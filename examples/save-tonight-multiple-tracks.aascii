# Sound-Of-Ascii is a tool to experiment
# with music composition in the browser.

# It defines a grammar to write songs
# like you would write programs.

# It is not Turing complete, but it is complex enough to build rich tracks.
# Below is an annotated example to get you started.

# By now you should have guessed that lines starting with "#" are comments.

# First thing we're going to do is define a few chords.
# Am, F, C, and G are some of the most common chords found in songs today,
# so let's start with that.

Am = [a, c, e, c1]
F  = [f, a, c, f1]
C  = [c, e, g, e1]
G  = [g, b, d, b1]

# A few explanations on the 4 lines above:
#   - We just defined 4 patterns, whose names appear to the left of the "=" sign. We will refer to them later from other patterns.
#   - Lower-case letters stand for single music notes. You can write a# for "a sharp", a- for "a flat".
#   - When you write comma-separated lists inside square brackets
#     it tells the engine to play all the different parts at the same time (this is how we build chords)

# Now let's create some rhythm.
# We define chord sequences that are built with our chord patterns.
# When you write lists without square brackets nor commas, it tells the engine to play the
# patterns one after another.
# The "^" increases the sustain of the preceding pattern by one unit of time.

Am_Measure = Am ^ Am Am ^ Am Am Am
F_Measure  = F  ^ F  F  ^ F  F  F
C_Measure  = C  ^ C  C  ^ C  C  C
G_Measure  = G  ^ G  G  ^ G  G  G

# All the sequences above have the same rhythm:
# quarter eight eigth quarter eight eight eight (or for the guitar players reading this: down down up up down up)

# Now let's make a verse by combining the four measures
# and assign an instrument at the same time:

Verse_A = :supernova Am_Measure F_Measure C_Measure G_Measure

# The ":supernova" notation is called an instrument tag.
# It sets the instrument for the rest of the sequence.
# Currently there are 4 very limited instruments: :erazzor, :supernova, :guitar and :kick.
# It is easy to write new instruments if you want to help :)
# I'd like to introduce a syntax to define instruments inline so that the whole song is self contained.

# I want to add a little bit more rhythm to the Verse_A part.
# This time I'll use some white noise to give a kind of drum sound.
# Since this rhythm is boring, we're using the "*" operator to repeat parts of the pattern

Verse_B = :kick a*4 f*4 c*4 g*4

# Here we combine the two parts of the Verse so that they play at the same time:
Verse = [Verse_A, Verse_B]

# I'll add a bridge too:
Bridge = [:supernova Am_Measure*4, :kick a*32]

# And a chorus:
Chorus = [Verse, :erazzor [[., c1 e1 c1 e1] [., f1 a1 f1 a1] [., e1 g1 e1 g1] [., g1 d1 g1 d1]]]

# You might find this part strange: [., c1 e1 c1 e1]
# Have no fear! When using the square brackets (or "sums" as I call these patterns),
# Sound-Of-Ascii makes it so that all the patterns are stretched to fit the duration of the
# first pattern of the list. And a "." means "silence".
# So [., c1 e1 c1 e1] is a trick to play 4 notes in the time interval that one note would usually take.
# That is, c1 e1 c1 e1 are all quarter notes if . is a full note.

# Time to put everything together:
Song = Verse Chorus Verse Bridge Chorus Verse Chorus

# And tell Sound-Of-Ascii what we want to play (the Start symbol of the grammar :))
@song = Song

# Finally, we say that the Am_Measure part should last 1 second.
# All of the notes durations are deduced from just one @duration annotation that
# sets the duration for a part of the song:
@duration(Am_Measure) = 1
